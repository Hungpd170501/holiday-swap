CREATE TABLE admin_wallet
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    total_point DOUBLE PRECISION,
    CONSTRAINT pk_admin_wallet PRIMARY KEY (id)
);

CREATE TABLE all_transaction_log
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    from_id      BIGINT                                  NOT NULL,
    to_id        BIGINT                                  NOT NULL,
    amount       BIGINT                                  NOT NULL,
    result_code  SMALLINT,
    detail       VARCHAR(255),
    created_on   VARCHAR(255),
    from_balance DOUBLE PRECISION,
    to_balance   DOUBLE PRECISION,
    commission   DOUBLE PRECISION,
    CONSTRAINT pk_all_transaction_log PRIMARY KEY (id)
);

CREATE TABLE contract_image
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    link        TEXT,
    is_deleted  BOOLEAN DEFAULT FALSE,
    property_id BIGINT,
    user_id     BIGINT,
    room_id     VARCHAR(255),
    CONSTRAINT pk_contract_image PRIMARY KEY (id)
);

CREATE TABLE conversation
(
    conversation_id  BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_on       TIMESTAMP WITHOUT TIME ZONE,
    created_by       VARCHAR(255),
    last_modified_on TIMESTAMP WITHOUT TIME ZONE,
    last_modified_by VARCHAR(255),
    CONSTRAINT pk_conversation PRIMARY KEY (conversation_id)
);

CREATE TABLE conversation_participant
(
    created_on       TIMESTAMP WITHOUT TIME ZONE,
    created_by       VARCHAR(255),
    last_modified_on TIMESTAMP WITHOUT TIME ZONE,
    last_modified_by VARCHAR(255),
    left_chat        BOOLEAN DEFAULT FALSE,
    conversation_id  BIGINT NOT NULL,
    user_id          BIGINT NOT NULL,
    CONSTRAINT pk_conversation_participant PRIMARY KEY (conversation_id, user_id)
);

CREATE TABLE cron_job_log
(
    cron_job_log_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    cron_job_name   VARCHAR(255)                            NOT NULL,
    cron_job_status VARCHAR(255)                            NOT NULL,
    message         VARCHAR(255)                            NOT NULL,
    created_on      TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_cronjoblog PRIMARY KEY (cron_job_log_id)
);

CREATE TABLE message
(
    message_id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text            VARCHAR(255),
    image           VARCHAR(255),
    created_on      TIMESTAMP WITHOUT TIME ZONE,
    author_id       BIGINT,
    message_type    VARCHAR(255),
    conversation_id BIGINT                                  NOT NULL,
    CONSTRAINT pk_message PRIMARY KEY (message_id)
);

CREATE TABLE money_transfer
(
    money_transfer_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id              BIGINT,
    bank_code            VARCHAR(255),
    order_infor          VARCHAR(255)                            NOT NULL,
    amount               DOUBLE PRECISION                        NOT NULL,
    amount_coint_deposit INTEGER,
    payment_date         VARCHAR(255)                            NOT NULL,
    status               SMALLINT                                NOT NULL,
    CONSTRAINT pk_money_transfer PRIMARY KEY (money_transfer_id)
);

CREATE TABLE notification
(
    notification_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    subject         VARCHAR(255),
    content         VARCHAR(255),
    created_on      TIMESTAMP WITHOUT TIME ZONE,
    status          INTEGER,
    CONSTRAINT pk_notification PRIMARY KEY (notification_id)
);

CREATE TABLE ownership
(
    start_time  TIMESTAMP WITHOUT TIME ZONE,
    end_time    TIMESTAMP WITHOUT TIME ZONE,
    type        VARCHAR(255),
    status      VARCHAR(255),
    is_deleted  BOOLEAN DEFAULT FALSE,
    property_id BIGINT       NOT NULL,
    user_id     BIGINT       NOT NULL,
    room_id     VARCHAR(255) NOT NULL,
    CONSTRAINT pk_ownership PRIMARY KEY (property_id, user_id, room_id)
);

CREATE TABLE payment_methods
(
    payment_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    CONSTRAINT pk_payment_methods PRIMARY KEY (payment_id)
);

CREATE TABLE plan
(
    plan_id             BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    plan_name           VARCHAR(255)                            NOT NULL,
    description         VARCHAR(255),
    image               VARCHAR(255),
    price               DOUBLE PRECISION                        NOT NULL,
    price_type          VARCHAR(255)                            NOT NULL,
    plan_price_interval VARCHAR(255)                            NOT NULL,
    created_on          TIMESTAMP WITHOUT TIME ZONE,
    last_modified_on    TIMESTAMP WITHOUT TIME ZONE,
    is_active           BOOLEAN                                 NOT NULL,
    CONSTRAINT pk_plan PRIMARY KEY (plan_id)
);

CREATE TABLE point
(
    point_id           BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    point_price        DOUBLE PRECISION,
    point_created_date VARCHAR(255),
    point_status       SMALLINT,
    CONSTRAINT pk_point PRIMARY KEY (point_id)
);

CREATE TABLE property_image
(
    image_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    link        TEXT,
    is_deleted  BOOLEAN DEFAULT FALSE,
    property_id BIGINT,
    CONSTRAINT pk_property_image PRIMARY KEY (image_id)
);

CREATE TABLE reservation
(
    reservation_id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id             BIGINT,
    checkin             TIMESTAMP WITHOUT TIME ZONE,
    checkout            TIMESTAMP WITHOUT TIME ZONE,
    is_deleted          BOOLEAN DEFAULT FALSE,
    status              VARCHAR(255),
    type                VARCHAR(255),
    note                VARCHAR(255),
    price_per_night     DOUBLE PRECISION,
    number_night        DOUBLE PRECISION,
    total_price         DOUBLE PRECISION,
    time_off_deposit_id BIGINT,
    CONSTRAINT pk_reservation PRIMARY KEY (reservation_id)
);

CREATE TABLE resort
(
    resort_id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    resort_name VARCHAR(255),
    location_id BIGINT,
    is_deleted  BOOLEAN DEFAULT FALSE,
    CONSTRAINT pk_resort PRIMARY KEY (resort_id)
);

CREATE TABLE resort_image
(
    image_resort_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    resort_id       BIGINT,
    link            TEXT,
    is_deleted      BOOLEAN DEFAULT FALSE,
    CONSTRAINT pk_resort_image PRIMARY KEY (image_resort_id)
);

CREATE TABLE resorts_amenities
(
    resort_amenity_id BIGINT NOT NULL,
    resort_id         BIGINT NOT NULL
);

CREATE TABLE resorts_property_type_property
(
    property_type_id BIGINT NOT NULL,
    resort_id        BIGINT NOT NULL
);

CREATE TABLE role
(
    role_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name       VARCHAR(255)                            NOT NULL,
    status     BOOLEAN                                 NOT NULL,
    created_on TIMESTAMP WITHOUT TIME ZONE,
    CONSTRAINT pk_role PRIMARY KEY (role_id)
);

CREATE TABLE subscription
(
    subscription_id      BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_on           TIMESTAMP WITHOUT TIME ZONE,
    last_modified_on     TIMESTAMP WITHOUT TIME ZONE,
    current_period_start TIMESTAMP WITHOUT TIME ZONE,
    current_period_end   TIMESTAMP WITHOUT TIME ZONE,
    subscription_status  VARCHAR(255)                            NOT NULL,
    user_id              BIGINT,
    plan_id              BIGINT,
    CONSTRAINT pk_subscription PRIMARY KEY (subscription_id)
);

CREATE TABLE subscription_detail
(
    subscription_detail_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    plan_id                BIGINT                                  NOT NULL,
    price                  DOUBLE PRECISION                        NOT NULL,
    created_on             TIMESTAMP WITHOUT TIME ZONE,
    period_start           TIMESTAMP WITHOUT TIME ZONE,
    period_end             TIMESTAMP WITHOUT TIME ZONE,
    subscription_id        BIGINT,
    CONSTRAINT pk_subscriptiondetail PRIMARY KEY (subscription_detail_id)
);

CREATE TABLE subscription_status_event
(
    subscription_status_event_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_on                   TIMESTAMP WITHOUT TIME ZONE,
    subscription_event_type      VARCHAR(255)                            NOT NULL,
    subscription_id              BIGINT,
    CONSTRAINT pk_subscriptionstatusevent PRIMARY KEY (subscription_status_event_id)
);

CREATE TABLE time_off_deposit
(
    time_off_deposit_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start_time          TIMESTAMP WITHOUT TIME ZONE,
    end_time            TIMESTAMP WITHOUT TIME ZONE,
    price_per_night     DOUBLE PRECISION,
    is_deleted          BOOLEAN DEFAULT FALSE,
    status              VARCHAR(255),
    vacation_unit_id    BIGINT,
    CONSTRAINT pk_time_off_deposit PRIMARY KEY (time_off_deposit_id)
);

CREATE TABLE token
(
    token_id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    token_type      VARCHAR(255)                            NOT NULL,
    value           VARCHAR(255)                            NOT NULL,
    created_on      TIMESTAMP WITHOUT TIME ZONE,
    expiration_time TIMESTAMP WITHOUT TIME ZONE             NOT NULL,
    status          VARCHAR(255)                            NOT NULL,
    user_id         BIGINT,
    CONSTRAINT pk_token PRIMARY KEY (token_id)
);

CREATE TABLE transaction_log
(
    transact_log_id  BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    wallet_from      BIGINT                                  NOT NULL,
    wallet_to        BIGINT                                  NOT NULL,
    from_total_point DOUBLE PRECISION,
    to_total_point   DOUBLE PRECISION,
    amount_point     BIGINT                                  NOT NULL,
    created_on       VARCHAR(255),
    commission       DOUBLE PRECISION,
    CONSTRAINT pk_transaction_log PRIMARY KEY (transact_log_id)
);

CREATE TABLE transaction_top_up_wallet
(
    wallet_transaction_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    wallet_id             BIGINT,
    amount                INTEGER,
    payment_date          VARCHAR(255),
    status                BOOLEAN,
    CONSTRAINT pk_transaction_top_up_wallet PRIMARY KEY (wallet_transaction_id)
);

CREATE TABLE user_blocked
(
    blocked_user_id BIGINT NOT NULL,
    user_id         BIGINT NOT NULL
);

CREATE TABLE users
(
    user_id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    created_on       TIMESTAMP WITHOUT TIME ZONE,
    created_by       VARCHAR(255),
    last_modified_on TIMESTAMP WITHOUT TIME ZONE,
    last_modified_by VARCHAR(255),
    email            VARCHAR(255)                            NOT NULL,
    password_hash    VARCHAR(255)                            NOT NULL,
    username         VARCHAR(255)                            NOT NULL,
    full_name        VARCHAR(255),
    avatar           VARCHAR(255),
    gender           VARCHAR(255)                            NOT NULL,
    dob              date                                    NOT NULL,
    phone            VARCHAR(255),
    email_verified   BOOLEAN,
    phone_verified   BOOLEAN,
    status           VARCHAR(255)                            NOT NULL,
    wallet_id        BIGINT,
    role_id          BIGINT,
    CONSTRAINT pk_users PRIMARY KEY (user_id)
);

CREATE TABLE vacation_unit
(
    vacation_unit_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start_time       TIMESTAMP WITHOUT TIME ZONE,
    end_time         TIMESTAMP WITHOUT TIME ZONE,
    is_deleted       BOOLEAN DEFAULT FALSE,
    status           VARCHAR(255),
    property_id      BIGINT,
    user_id          BIGINT,
    room_id          VARCHAR(255),
    CONSTRAINT pk_vacation_unit PRIMARY KEY (vacation_unit_id)
);

CREATE TABLE wallet
(
    wallet_id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    total_point DOUBLE PRECISION,
    status      BOOLEAN,
    CONSTRAINT pk_wallet PRIMARY KEY (wallet_id)
);

CREATE TABLE public.in_room_amenity
(
    in_room_amenity_id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    in_room_amenity_name        TEXT,
    in_room_amenity_description TEXT,
    is_deleted                  BOOLEAN DEFAULT FALSE,
    in_room_amenity_type_id     BIGINT,
    CONSTRAINT pk_in_room_amenity PRIMARY KEY (in_room_amenity_id)
);

CREATE TABLE public.in_room_amenity_type
(
    in_room_amenity_type_id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    in_room_amenity_type_name        TEXT,
    in_room_amenity_type_description TEXT,
    is_deleted                       BOOLEAN DEFAULT FALSE,
    CONSTRAINT pk_in_room_amenity_type PRIMARY KEY (in_room_amenity_type_id)
);

CREATE TABLE public.location
(
    location_id    BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    code           VARCHAR(35)                             NOT NULL,
    coordinates    POINT,
    description    VARCHAR(255),
    formatted_name VARCHAR(255),
    name           VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_location PRIMARY KEY (location_id)
);

CREATE TABLE public.properties_amenities
(
    in_room_amenity_id BIGINT NOT NULL,
    property_id        BIGINT NOT NULL
);

CREATE TABLE public.property
(
    property_id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    number_king_beds   INTEGER,
    number_qeen_beds   INTEGER,
    number_twin_beds   INTEGER,
    number_full_beds   INTEGER,
    number_sofa_beds   INTEGER,
    number_murphy_beds INTEGER,
    number_beds_room   INTEGER,
    number_baths_room  INTEGER,
    room_size          DOUBLE PRECISION,
    is_deleted         BOOLEAN DEFAULT FALSE,
    status             TEXT,
    property_type_id   BIGINT,
    property_view_id   BIGINT,
    CONSTRAINT pk_property PRIMARY KEY (property_id)
);

CREATE TABLE public.property_type
(
    property_type_id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    property_type_description TEXT,
    is_deleted                BOOLEAN DEFAULT FALSE,
    property_type_name        TEXT,
    CONSTRAINT pk_property_type PRIMARY KEY (property_type_id)
);

CREATE TABLE public.property_view
(
    property_view_id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    property_view_name        TEXT,
    property_view_description TEXT,
    is_deleted                BOOLEAN DEFAULT FALSE,
    CONSTRAINT pk_property_view PRIMARY KEY (property_view_id)
);

CREATE TABLE public.resort_amenity
(
    resort_amenity_id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    resort_amenity_name        TEXT                                    NOT NULL,
    resort_amenity_description VARCHAR(255),
    is_deleted                 BOOLEAN DEFAULT FALSE,
    resort_amenity_type_id     BIGINT,
    CONSTRAINT pk_resort_amenity PRIMARY KEY (resort_amenity_id)
);

CREATE TABLE public.resort_amenity_type
(
    resort_amenity_type_id          BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    resort_amenity_type_name        TEXT                                    NOT NULL,
    resort_amenity_type_description VARCHAR(255),
    is_deleted                      BOOLEAN DEFAULT FALSE,
    CONSTRAINT pk_resort_amenity_type PRIMARY KEY (resort_amenity_type_id)
);

ALTER TABLE plan
    ADD CONSTRAINT uc_plan_plan_name UNIQUE (plan_name);

ALTER TABLE role
    ADD CONSTRAINT uc_role_name UNIQUE (name);

ALTER TABLE users
    ADD CONSTRAINT uc_users_email UNIQUE (email);

ALTER TABLE users
    ADD CONSTRAINT uc_users_username UNIQUE (username);

ALTER TABLE contract_image
    ADD CONSTRAINT FK_CONTRACT_IMAGE_ON_PRIDUSIDROID FOREIGN KEY (property_id, user_id, room_id) REFERENCES ownership (property_id, user_id, room_id);

ALTER TABLE conversation_participant
    ADD CONSTRAINT FK_CONVERSATION_PARTICIPANT_ON_CONVERSATION FOREIGN KEY (conversation_id) REFERENCES conversation (conversation_id);

ALTER TABLE conversation_participant
    ADD CONSTRAINT FK_CONVERSATION_PARTICIPANT_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE message
    ADD CONSTRAINT FK_MESSAGE_ON_CONVERSATION FOREIGN KEY (conversation_id) REFERENCES conversation (conversation_id);

ALTER TABLE money_transfer
    ADD CONSTRAINT FK_MONEY_TRANSFER_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE ownership
    ADD CONSTRAINT FK_OWNERSHIP_ON_PROPERTY FOREIGN KEY (property_id) REFERENCES public.property (property_id);

ALTER TABLE ownership
    ADD CONSTRAINT FK_OWNERSHIP_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE property_image
    ADD CONSTRAINT FK_PROPERTY_IMAGE_ON_PROPERTY FOREIGN KEY (property_id) REFERENCES public.property (property_id);

ALTER TABLE reservation
    ADD CONSTRAINT FK_RESERVATION_ON_TIME_OFF_DEPOSIT FOREIGN KEY (time_off_deposit_id) REFERENCES time_off_deposit (time_off_deposit_id);

ALTER TABLE reservation
    ADD CONSTRAINT FK_RESERVATION_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE resort_image
    ADD CONSTRAINT FK_RESORT_IMAGE_ON_RESORT FOREIGN KEY (resort_id) REFERENCES resort (resort_id);

ALTER TABLE resort
    ADD CONSTRAINT FK_RESORT_ON_LOCATION FOREIGN KEY (location_id) REFERENCES public.location (location_id);

ALTER TABLE subscription_detail
    ADD CONSTRAINT FK_SUBSCRIPTIONDETAIL_ON_SUBSCRIPTION FOREIGN KEY (subscription_id) REFERENCES subscription (subscription_id);

ALTER TABLE subscription_status_event
    ADD CONSTRAINT FK_SUBSCRIPTIONSTATUSEVENT_ON_SUBSCRIPTION FOREIGN KEY (subscription_id) REFERENCES subscription (subscription_id);

ALTER TABLE subscription
    ADD CONSTRAINT FK_SUBSCRIPTION_ON_PLAN FOREIGN KEY (plan_id) REFERENCES plan (plan_id);

ALTER TABLE subscription
    ADD CONSTRAINT FK_SUBSCRIPTION_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE time_off_deposit
    ADD CONSTRAINT FK_TIME_OFF_DEPOSIT_ON_VACATION_UNIT FOREIGN KEY (vacation_unit_id) REFERENCES vacation_unit (vacation_unit_id);

ALTER TABLE token
    ADD CONSTRAINT FK_TOKEN_ON_USER FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE transaction_log
    ADD CONSTRAINT FK_TRANSACTION_LOG_ON_WALLET_FROM FOREIGN KEY (wallet_from) REFERENCES wallet (wallet_id);

ALTER TABLE transaction_log
    ADD CONSTRAINT FK_TRANSACTION_LOG_ON_WALLET_TO FOREIGN KEY (wallet_to) REFERENCES wallet (wallet_id);

ALTER TABLE transaction_top_up_wallet
    ADD CONSTRAINT FK_TRANSACTION_TOP_UP_WALLET_ON_WALLET FOREIGN KEY (wallet_id) REFERENCES wallet (wallet_id);

ALTER TABLE users
    ADD CONSTRAINT FK_USERS_ON_ROLE FOREIGN KEY (role_id) REFERENCES role (role_id);

ALTER TABLE users
    ADD CONSTRAINT FK_USERS_ON_WALLET FOREIGN KEY (wallet_id) REFERENCES wallet (wallet_id);

ALTER TABLE vacation_unit
    ADD CONSTRAINT FK_VACATION_UNIT_ON_PRIDUSIDROID FOREIGN KEY (property_id, user_id, room_id) REFERENCES ownership (property_id, user_id, room_id);

ALTER TABLE resorts_amenities
    ADD CONSTRAINT fk_resame_on_resort FOREIGN KEY (resort_id) REFERENCES resort (resort_id);

ALTER TABLE resorts_amenities
    ADD CONSTRAINT fk_resame_on_resort_amenity FOREIGN KEY (resort_amenity_id) REFERENCES public.resort_amenity (resort_amenity_id);

ALTER TABLE resorts_property_type_property
    ADD CONSTRAINT fk_resprotyppro_on_property_type FOREIGN KEY (property_type_id) REFERENCES public.property_type (property_type_id);

ALTER TABLE resorts_property_type_property
    ADD CONSTRAINT fk_resprotyppro_on_resort FOREIGN KEY (resort_id) REFERENCES resort (resort_id);

ALTER TABLE user_blocked
    ADD CONSTRAINT fk_useblo_on_blocked_user FOREIGN KEY (blocked_user_id) REFERENCES users (user_id);

ALTER TABLE user_blocked
    ADD CONSTRAINT fk_useblo_on_user FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE public.in_room_amenity
    ADD CONSTRAINT FK_IN_ROOM_AMENITY_ON_IN_ROOM_AMENITY_TYPE FOREIGN KEY (in_room_amenity_type_id) REFERENCES public.in_room_amenity_type (in_room_amenity_type_id);

ALTER TABLE public.property
    ADD CONSTRAINT FK_PROPERTY_ON_PROPERTY_TYPE FOREIGN KEY (property_type_id) REFERENCES public.property_type (property_type_id);

ALTER TABLE public.property
    ADD CONSTRAINT FK_PROPERTY_ON_PROPERTY_VIEW FOREIGN KEY (property_view_id) REFERENCES public.property_view (property_view_id);

ALTER TABLE public.resort_amenity
    ADD CONSTRAINT FK_RESORT_AMENITY_ON_RESORT_AMENITY_TYPE FOREIGN KEY (resort_amenity_type_id) REFERENCES public.resort_amenity_type (resort_amenity_type_id);

ALTER TABLE public.properties_amenities
    ADD CONSTRAINT fk_proame_on_in_room_amenity FOREIGN KEY (in_room_amenity_id) REFERENCES public.in_room_amenity (in_room_amenity_id);

ALTER TABLE public.properties_amenities
    ADD CONSTRAINT fk_proame_on_property FOREIGN KEY (property_id) REFERENCES public.property (property_id);